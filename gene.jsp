<%@ include file="/web/common/anon_session_vars.jsp" %>

<%
    log.debug("before extras");


    //extrasList.add("jquery.dataTables.1.10.9.min.js");
    extrasList.add("datatables.1.10.21.min.js");
    extrasList.add("jquery-ui-1.12.1.min.js");
    extrasList.add("jquery.cookie.js");
    extrasList.add("fancyBox/helpers/jquery.fancybox-thumbs.js");
    extrasList.add("fancyBox/jquery.fancybox.js");
    extrasList.add("spectrum.js");
    extrasList.add("svg-pan-zoom.3.5.1.min.js");
    extrasList.add("jquery.twosidedmultiselect.js");
    //extrasList.add("d3.v3.5.16.min.js");
    extrasList.add("jquery-ui-1.12.1.min.css");
    //extrasList.add("tableExport/tableExport.js");
    //extrasList.add("tableExport/jquery.base64.js");
    //extrasList.add("datatables.1.10.21.min.css");
    extrasList.add("tabs.css");
    extrasList.add("tsmsselect.css");
    extrasList.add("jquery.fancybox.css");
    extrasList.add("jquery.fancybox-thumbs.css");
    extrasList.add("spectrum.css");
    extrasList.add("detailedTranscriptInfo.js");
    extrasList.add("d3.v4.8.0.min.js");
    //extrasList.add("jquery.dataTables.min.css");
    log.debug("after extras");
%>
<%
    log.debug("top of page");
    String myGene = "";
    String message = "";
    String section = "";
    String myDisplayGene = "";
    String defView = "3";
    String overideGV = "N";
    String UUID = "";
    boolean scriptError = false;
    boolean organismError = false;
    boolean popup = false;
    if (request.getParameter("geneTxt") != null) {
        log.debug(request.getParameter("geneTxt").trim() + ": MyGene before filtering.");
        myGene = FilterInput.getFilteredInput(request.getParameter("geneTxt").trim());
        log.debug(myGene + ": MyGene after filtering.");
        myGene = myGene.replaceAll(",", "");
        String lcmyGene = myGene.toLowerCase();
                /*if(myGene.length()>150 || lcmyGene.contains("((") || lcmyGene.contains("||") || lcmyGene.contains("))")|| lcmyGene.contains("select")|| lcmyGene.contains("delete")|| lcmyGene.contains("union") || lcmyGene.contains("join") || lcmyGene.contains("from")|| lcmyGene.contains("char") ){
                    log.info("Script Submitted via Form: "+request.getRemoteAddr());
                    log.info("Contents:"+myGene);
                    myGene="";
                    action=null;
                    scriptError=true;
                }*/
    }
    if (request.getParameter("overideGV") != null && request.getParameter("overideGV").equals("Y")) {
        overideGV = "Y";
    }
    if (request.getParameter("newWindow") != null && request.getParameter("newWindow").equals("Y")) {
        popup = true;
    }

    if (request.getParameter("defaultView") != null) {
        defView = FilterInput.getFilteredInput(request.getParameter("defaultView"));
    }
    if (request.getParameter("section") != null) {
        section = FilterInput.getFilteredInput(request.getParameter("section"));
    }
    if (request.getParameter("uuid") != null) {
        UUID = FilterInput.getFilteredInput(request.getParameter("uuid"));
    }
    pageTitle = "Genome/Transcriptome Browser " + myGene;
    pageDescription = "Genome/Transcriptome Browser provides a vizualization of Microarray and RNA-Seq data along the genome as well as summarize eQTL/WGCNA data for genes and/or regions.";
    log.debug("end of top");
%>
<%if (popup) {%>
<%@ include file="/web/common/header_adaptive_noMenu.jsp" %>
<%} else {%>
<%@ include file="/web/common/header_adaptive_menu.jsp" %>
<div id="wait1" style="background:#FFFFFF;"><img src="<%=imagesDir%>wait.gif" alt="Working..."/><BR/>Working...Genes
    should load within 5-10 seconds. Regions depend on the size(ex. 10 Megabases may take ~1 minute).
</div>
<%}%>
<%@ include file="/web/GeneCentric/browserCSS.jsp" %>

<jsp:useBean id="myIDecoderClient" class="edu.ucdenver.ccp.PhenoGen.tools.idecoder.IDecoderClient"></jsp:useBean>
<jsp:useBean id="bt" class="edu.ucdenver.ccp.PhenoGen.tools.analysis.BrowserTools" scope="session"></jsp:useBean>
<jsp:useBean id="gdt" class="edu.ucdenver.ccp.PhenoGen.tools.analysis.GeneDataTools" scope="session"></jsp:useBean>

<%
    log.debug("begining of most code");
    //GeneDataTools gdt=new GeneDataTools();
    gdt.setSession(session);
    bt.setSession(session);

    String myOrganism = "Rn";
    ObjectHandler oh = new ObjectHandler();
    //Files generated by calling java method ().
    ArrayList<String> ucscURL = new ArrayList<String>();
    //ArrayList<String> ucscURLFiltered=new ArrayList<String>();
    ArrayList<String> genURL = new ArrayList<String>();
    ArrayList<String> geneSymbol = new ArrayList<String>();
    ArrayList<String> firstEnsemblID = new ArrayList<String>();
    ArrayList<edu.ucdenver.ccp.PhenoGen.data.Bio.Gene> fullGeneList = new ArrayList<edu.ucdenver.ccp.PhenoGen.data.Bio.Gene>();

    String fullImg = "";
    String fullOrg = "";
    String filteredImg = "";
    String panel = "";
    String chromosome = "";
    String transcriptome = "ensembl";
    String cisOnly = "all";
    LinkGenerator lg = new LinkGenerator(session);

    boolean displayNoEnsembl = false;
    boolean auto = false;
    boolean region = false;

    double pValueCutoff = 0.0001;
    double forwardPValueCutoff = 0.01;

    int rnaDatasetID = 0;
    int arrayTypeID = 0;
    int selectedGene = 0;
    int min = 0;
    int max = 0;
    String selectedEnsemblID = "";
    String regionError = "";
    String genomeVer = "rn6";
    String defaultGenomeVer = "rn6";

    Set iDecoderAnswer;

    if ((myGene.toLowerCase().startsWith("chr") || myGene.toLowerCase().startsWith("ch")) && myGene.indexOf(":") > 0) {
        log.debug("myGene:" + myGene);
        region = true;
        if (myGene.indexOf("-") < 0 && myGene.indexOf("+") < 0) {
            //log.debug(myGene.indexOf("-")+"::"+myGene.indexOf("+"));
            region = false;
            regionError = "You have entered an invalid region.  Please see the examples in the instructions.";
        }
    }
    if (request.getParameter("speciesCB") != null) {
        myOrganism = FilterInput.getFilteredInput(request.getParameter("speciesCB").trim());
        if (myOrganism.length() > 2) {
            myOrganism = myOrganism.substring(0, 2);
        }
        if (myOrganism.equals("Rn")) {
            panel = "BNLX/SHRH";
            fullOrg = "Rattus_norvegicus";
            genomeVer = "rn6";
            defaultGenomeVer = "rn6";
        } else if (myOrganism.equals("Mm")) {
            panel = "ILS/ISS";
            fullOrg = "Mus_musculus";
            genomeVer = "mm10";
            defaultGenomeVer = "mm10";
        } else {
            organismError = true;
        }
    }
    log.debug("*****\nafter species Genome:" + genomeVer);
    if (request.getParameter("genomeVer") != null) {
        genomeVer = FilterInput.getFilteredInputGenomeVer(request.getParameter("genomeVer").trim());
        if (!genomeVer.equals("")) {
            overideGV = "Y";
        } else {
            genomeVer = defaultGenomeVer;
        }
        if (genomeVer.startsWith("hs") || genomeVer.startsWith("rn") || genomeVer.startsWith("mm")) {

        } else {
            genomeVer = defaultGenomeVer;
        }
        log.debug("******\nreading Genome Ver:" + genomeVer);
    }
    int val = -1;
    try {
        val = Integer.parseInt(defView);
    } catch (Exception e) {
    }
    if (genomeVer.equals("rn6") && val > -1 && val < 11) {
        defView = Integer.toString(val + 10);
    }
    log.debug("*****\ncurGenome:" + genomeVer);
    ArrayList<BrowserView> views = bt.getBrowserViews(genomeVer, UUID);
    log.debug("*****\nView length:" + views.size());
    String[] tissuesList1 = new String[1];
    String[] tissuesList2 = new String[1];
    if (myOrganism.equals("Rn")) {
        tissuesList1 = new String[4];
        tissuesList2 = new String[4];
        tissuesList1[0] = "Brain";
        tissuesList2[0] = "Whole Brain";
        tissuesList1[1] = "Heart";
        tissuesList2[1] = "Heart";
        tissuesList1[2] = "Liver";
        tissuesList2[2] = "Liver";
        tissuesList1[3] = "Brown Adipose";
        tissuesList2[3] = "Brown Adipose";
    } else {
        tissuesList1[0] = "Brain";
        tissuesList2[0] = "Whole Brain";
    }

    if (request.getParameter("auto") != null) {
        String tmp = FilterInput.getFilteredInput(request.getParameter("auto"));
        if (tmp.equals("Y")) {
            auto = true;
        }
    }
    log.debug("Selected Gene=" + request.getParameter("geneSelect"));
    if (request.getParameter("geneSelect") != null && !(request.getParameter("geneSelect").equals(""))) {
        selectedEnsemblID = FilterInput.getFilteredInput(request.getParameter("geneSelect").trim());
        //selectedGene=Integer.parseInt(request.getParameter("geneSelect").trim());
        //log.debug("Selected Gene:"+selectedGene);
    }

    if (request.getParameter("pvalueCutoffInput") != null) {
        pValueCutoff = Double.parseDouble(FilterInput.getFilteredInput(request.getParameter("pvalueCutoffInput")));
    }
    if (request.getParameter("forwardPvalueCutoffInput") != null) {
        forwardPValueCutoff = Double.parseDouble(FilterInput.getFilteredInput(request.getParameter("forwardPvalueCutoffInput")));
    }

    log.debug("ACTION=" + action + "  region=" + region + "   gene=" + myGene + "   rev. pvalue=" + pValueCutoff + "  for Pval=" + forwardPValueCutoff);
	
        /*if((action != null) && action.equals("Go")){
                response.redirect(lg.getGeneLink(curGene.getGeneID(),myOrganism,true,true,false));
        }else */
    if ((((action != null) && action.equals("Get Transcription Details")) && (!region)) || (auto && (!region))
    ) {
        myDisplayGene = myGene;
        mySessionHandler.createSessionActivity(session.getId(), "GTD Browser Gene: " + myGene, pool);
        List homologList = null;

        if (myGene.startsWith("ENSRNOG") || myGene.startsWith("ENSMUSG")) {
            myIDecoderClient.setNum_iterations(0);
        } else {
            myIDecoderClient.setNum_iterations(1);
        }
        iDecoderAnswer = myIDecoderClient.getIdentifiersByInputIDAndTarget(myGene, myOrganism, new String[]{"Ensembl ID"}, pool);
        myIDecoderClient.setNum_iterations(1);

        List myIdentifierList = null;
        Identifier targetIdentifier = null;

        if (iDecoderAnswer != null) {
            log.debug("answer is not null.");
            myIdentifierList = Arrays.asList(iDecoderAnswer.toArray((Identifier[]) new Identifier[iDecoderAnswer.size()]));

            Set homologSet = null;
            for (int i = 0; i < myIdentifierList.size() && targetIdentifier == null; i++) {
                log.debug("ID LIST[" + i + "]:" + ((Identifier) myIdentifierList.get(i)).getIdentifier());
                Identifier thisIdentifier = (Identifier) myIdentifierList.get(0);
                HashMap linksHash = thisIdentifier.getTargetHashMap();
                log.debug("linksHash size:" + linksHash.size());
                homologSet = myIDecoderClient.getIdentifiersForTargetForOneID(linksHash, new String[]{"Ensembl ID"});
                if (homologSet != null && homologSet.size() > 0) {
                    targetIdentifier = thisIdentifier;
                }
            }

            if (homologSet != null && homologSet.size() > 0) {
                log.debug("Ens homolog set is not null");
                homologList = myObjectHandler.getAsList(homologSet);
            } else {
                log.debug("ENS homolog set is null checking Phenogen");
                //check if PhenoGenID and revert to a region for that gene.
                iDecoderAnswer = myIDecoderClient.getIdentifiersByInputIDAndTarget(myGene, myOrganism, new String[]{"PhenoGen ID"}, pool);
                if (iDecoderAnswer != null) {
                    log.debug("checking Phenogen ID:" + myGene);
                    myIdentifierList = Arrays.asList(iDecoderAnswer.toArray((Identifier[]) new Identifier[iDecoderAnswer.size()]));
                    //Identifier targetIdentifier=null;
                    homologSet = null;
                    for (int i = 0; i < myIdentifierList.size() && targetIdentifier == null; i++) {
                        log.debug("ID LIST[" + i + "]:" + ((Identifier) myIdentifierList.get(i)).getIdentifier());
                        Identifier thisIdentifier = (Identifier) myIdentifierList.get(i);
                        Set<Identifier> related = thisIdentifier.getRelatedIdentifiers();
                        log.debug("relatedSet size:" + related.size());
                        for (Identifier r : related) {
                            if (r.getIdentifier().equals(myGene)) {
                                targetIdentifier = r;
                            }
                        }
                    }
                }
                if (targetIdentifier == null) {
                    displayNoEnsembl = true;
                }
            }
        } else {
            displayNoEnsembl = true;
        }

        if (homologList != null && homologList.size() > 0) {
            int[] tmp = gdt.getOrganismSpecificIdentifiers(myOrganism, genomeVer);
            if (tmp != null && tmp.length == 2) {
                rnaDatasetID = tmp[1];
                arrayTypeID = tmp[0];
            }

            for (int i = 0; i < homologList.size(); i++) {
                Identifier homologIdentifier = (Identifier) homologList.get(i);
                if (homologIdentifier.getIdentifier().indexOf("ENSMUSG") > -1 || homologIdentifier.getIdentifier().indexOf("ENSRNOG") > -1) {
                    //myEnsemblIDs.add(homologIdentifier.getIdentifier());
                    log.debug("RUNNING GDT for " + homologIdentifier.getIdentifier());
                    ArrayList<edu.ucdenver.ccp.PhenoGen.data.Bio.Gene> tmpGeneList = gdt.getGeneCentricData(myGene, homologIdentifier.getIdentifier(), panel, myOrganism, genomeVer, rnaDatasetID, arrayTypeID, false);

                    String tmpURL = gdt.getGenURL();//(String)session.getAttribute("genURL");
                    String tmpGeneSymbol = gdt.getGeneSymbol();//(String)session.getAttribute("geneSymbol");
                    log.debug(tmpURL + "\n" + tmpGeneSymbol);
                    String tmpUcscURL = gdt.getUCSCURL();
                    if (i == 0) {
                        min = gdt.getMinCoord();
                        max = gdt.getMaxCoord();
                        chromosome = gdt.getChromosome();
                        fullGeneList = tmpGeneList;
                    }
                    //(String)session.getAttribute("ucscURL");
                    //String tmpUcscURLFiltered =gdt.getUCSCURLFiltered();//(String)session.getAttribute("ucscURLFiltered");

                    if (tmpURL != null) {
                        genURL.add(tmpURL);
                        if (tmpGeneSymbol == null && !tmpURL.startsWith("ERROR:")) {
                            geneSymbol.add("");
                        } else if (tmpURL.startsWith("ERROR:")) {
                            geneSymbol.add("ERROR GENERATING");
                        } else {
                            geneSymbol.add(tmpGeneSymbol);
                        }

                        if (tmpUcscURL == null) {
                            ucscURL.add("");
                        } else {
                            ucscURL.add(tmpUcscURL);
                        }
                                            /*if(tmpUcscURLFiltered==null){
                                                    ucscURLFiltered.add("");
                                            }else{
                                                    ucscURLFiltered.add(tmpUcscURLFiltered);
                                            }*/
                        firstEnsemblID.add(homologIdentifier.getIdentifier());
                        if (tmpGeneSymbol != null && tmpGeneSymbol.equals(myGene)) {
                            selectedGene = i;
                            selectedEnsemblID = homologIdentifier.getIdentifier();
                            min = gdt.getMinCoord();
                            max = gdt.getMaxCoord();
                            chromosome = gdt.getChromosome();
                            fullGeneList = tmpGeneList;
                        }
                    }
                }
            }
                    /*session.setAttribute("genURLArray",genURL);
                    session.setAttribute("ucscURLArray",geneSymbol);
                    session.setAttribute("geneSymbolArray",ucscURL);
                    session.setAttribute("ucscURLFilteredArray",ucscURLFiltered);
                    session.setAttribute("firstEnsemblIDArray",firstEnsemblID);*/
        } else {
            if (myGene.startsWith("PRN")) {
                DecimalFormat df0 = new DecimalFormat("#,###");
                log.debug("Phenogen ID:" + targetIdentifier);
                String loc = targetIdentifier.getChromosomeLocation();
                log.debug("Phenogen ID:" + loc);
                String[] part1 = loc.split(":");
                String[] part2 = part1[1].split("-");
                String chr = part1[0];
                min = Integer.parseInt(part2[0]);
                max = Integer.parseInt(part2[1]);
                myDisplayGene = myGene;
                fullGeneList = gdt.getRegionData(chr, min, max, panel, myOrganism, genomeVer, rnaDatasetID, arrayTypeID, forwardPValueCutoff, false, false);
                String tmpURL = gdt.getGenURL();//(String)session.getAttribute("genURL");
                String tmpGeneSymbol = gdt.getGeneSymbol();//(String)session.getAttribute("geneSymbol");
                String tmpUcscURL = gdt.getUCSCURL();//(String)session.getAttribute("ucscURL");
                //String tmpUcscURLFiltered =gdt.getUCSCURLFiltered();//(String)session.getAttribute("ucscURLFiltered");
                if (tmpURL != null) {
                    genURL.add(tmpURL);
                    if (tmpGeneSymbol == null) {
                        geneSymbol.add("");
                    } else {
                        geneSymbol.add(tmpGeneSymbol);
                    }
                    if (tmpUcscURL == null) {
                        ucscURL.add("");
                    } else {
                        ucscURL.add(tmpUcscURL);
                    }
                                /*if(tmpUcscURLFiltered==null){
                                        ucscURLFiltered.add("");
                                }else{
                                        ucscURLFiltered.add(tmpUcscURLFiltered);
                                }*/
                }
            } else {
                gdt.getGeneCentricData(myGene, "", panel, myOrganism, genomeVer, rnaDatasetID, arrayTypeID, false);
                displayNoEnsembl = true;
            }
        }
    } else if ((((action != null) && action.equals("Get Transcription Details")) && region)
            || (auto && region)) {
        mySessionHandler.createSessionActivity(session.getId(), "GTD Browser Region: " + myGene, pool);
        //log.debug("RUNNING REGION");
        int[] tmp = gdt.getOrganismSpecificIdentifiers(myOrganism, genomeVer);
        if (tmp != null && tmp.length == 2) {
            rnaDatasetID = tmp[1];
            arrayTypeID = tmp[0];
        }

        String minCoord = "";
        String maxCoord = "";
        int multI = 1000000;
        int multA = 1000000;
        if (myGene.indexOf(":") > 0) {
            chromosome = myGene.substring(0, myGene.indexOf(":"));
            if (myGene.indexOf("+-") > 0) {
                minCoord = myGene.substring(myGene.indexOf(":") + 1, myGene.indexOf("+-")).trim();
                maxCoord = myGene.substring(myGene.indexOf("+-") + 2).trim();
                if (minCoord.toLowerCase().contains("k")) {
                    multI = 1000;
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("k") - 1);
                } else if (minCoord.toLowerCase().contains("m")) {
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("m") - 1);
                }
                if (maxCoord.toLowerCase().contains("k")) {
                    multA = 1000;
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("k") - 1);
                } else if (maxCoord.toLowerCase().contains("m")) {
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("m") - 1);
                }
                if (minCoord.indexOf(".") == -1) {
                    min = Integer.parseInt(minCoord);
                } else {
                    double mb = Double.parseDouble(minCoord);
                    min = (int) Math.floor(mb * multI);
                }
                if (maxCoord.indexOf(".") == -1) {
                    max = Integer.parseInt(maxCoord);
                } else {
                    double mb = Double.parseDouble(maxCoord);
                    max = (int) Math.floor(mb * multA);
                }
                int tmpInt = max;
                max = min + tmpInt;
                min = min - tmpInt;
            } else if (myGene.indexOf("-+") > 0) {
                minCoord = myGene.substring(myGene.indexOf(":") + 1, myGene.indexOf("-+")).trim();
                maxCoord = myGene.substring(myGene.indexOf("-+") + 2).trim();
                if (minCoord.toLowerCase().contains("k")) {
                    multI = 1000;
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("k") - 1);
                } else if (minCoord.toLowerCase().contains("m")) {
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("m") - 1);
                }
                if (maxCoord.toLowerCase().contains("k")) {
                    multA = 1000;
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("k") - 1);
                } else if (maxCoord.toLowerCase().contains("m")) {
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("m") - 1);
                }
                if (minCoord.indexOf(".") == -1) {
                    min = Integer.parseInt(minCoord);
                } else {
                    double mb = Double.parseDouble(minCoord);
                    min = (int) Math.floor(mb * multI);
                }
                if (maxCoord.indexOf(".") == -1) {
                    max = Integer.parseInt(maxCoord);
                } else {
                    double mb = Double.parseDouble(maxCoord);
                    max = (int) Math.floor(mb * multA);
                }
                int tmpInt = max;
                max = min + tmpInt;
                min = min - tmpInt;
            } else if (myGene.indexOf("+") > 0) {
                minCoord = myGene.substring(myGene.indexOf(":") + 1, myGene.indexOf("+")).trim();
                maxCoord = myGene.substring(myGene.indexOf("+") + 1).trim();
                if (minCoord.toLowerCase().contains("k")) {
                    multI = 1000;
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("k") - 1);
                } else if (minCoord.toLowerCase().contains("m")) {
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("m") - 1);
                }
                if (maxCoord.toLowerCase().contains("k")) {
                    multA = 1000;
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("k") - 1);
                } else if (maxCoord.toLowerCase().contains("m")) {
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("m") - 1);
                }
                if (minCoord.indexOf(".") == -1) {
                    min = Integer.parseInt(minCoord);
                } else {
                    double mb = Double.parseDouble(minCoord);
                    min = (int) Math.floor(mb * multI);
                }
                if (maxCoord.indexOf(".") == -1) {
                    max = Integer.parseInt(maxCoord);
                } else {
                    double mb = Double.parseDouble(maxCoord);
                    max = (int) Math.floor(mb * multA);
                }
                max = min + max;
            } else if (myGene.indexOf("-") > 0) {
                minCoord = myGene.substring(myGene.indexOf(":") + 1, myGene.indexOf("-")).trim();
                maxCoord = myGene.substring(myGene.indexOf("-") + 1).trim();
                if (minCoord.toLowerCase().contains("k")) {
                    multI = 1000;
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("k") - 1);
                } else if (minCoord.toLowerCase().contains("m")) {
                    minCoord = minCoord.substring(0, minCoord.toLowerCase().indexOf("m") - 1);
                }
                if (maxCoord.toLowerCase().contains("k")) {
                    multA = 1000;
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("k") - 1);
                } else if (maxCoord.toLowerCase().contains("m")) {
                    maxCoord = maxCoord.substring(0, maxCoord.toLowerCase().indexOf("m") - 1);
                }
                if (minCoord.indexOf(".") == -1) {
                    min = Integer.parseInt(minCoord);
                } else {
                    double mb = Double.parseDouble(minCoord);
                    min = (int) Math.floor(mb * multI);
                }
                if (maxCoord.indexOf(".") == -1) {
                    max = Integer.parseInt(maxCoord);
                } else {
                    double mb = Double.parseDouble(maxCoord);
                    max = (int) Math.floor(mb * multA);
                }

            } else {
                regionError = "You have entered an invalid region.  Please see the examples in the instructions.";
            }
            String chrName = "";
            if (chromosome.toLowerCase().startsWith("chr")) {
                if (chromosome.length() > 3) {
                    chrName = chromosome.substring(3);
                }
            } else if (chromosome.toLowerCase().startsWith("ch")) {
                if (chromosome.length() > 2) {
                    chrName = chromosome.substring(2);
                }
            }
            chrName = chrName.trim();
            chromosome = "chr" + chrName;

            if (chrName.equals("")) {
                regionError = "You are missing the name of the chromosome you wish to view.  Example: chr1:50000-1000000";
            } else {
                int part = 0;
                try {
                    part = Integer.parseInt(chrName);
                } catch (NumberFormatException e) {
                }
                if (chrName.toLowerCase().equals("x") || chrName.toLowerCase().equals("y") || chrName.toLowerCase().equals("m") || (part > 0 && part < 22)) {

                } else {
                    regionError = "You have entered an invalid chromosome name.  For the supported species the chromosome should be 1-20 or 21 or X or M.  Example: chr1:50000-1000000";
                }
            }

            //log.debug("min:"+min+"\nmax:"+max);
            if (regionError.equals("")) {
                if (min < max) {
                    if (min < 1) {
                        min = 1;
                    }
                    if ((max - min) > 15000000) {
                        message = "Region was greater than the recommended maximum of 15Mbp.  The region has been adjusted to minimum coordinate + 15Mbp.";
                        max = min + 15000000;
                    }
                    DecimalFormat df0 = new DecimalFormat("#,###");
                    myDisplayGene = chromosome + ":" + df0.format(min) + "-" + df0.format(max);
                    fullGeneList = gdt.getRegionData(chromosome, min, max, panel, myOrganism, genomeVer, rnaDatasetID, arrayTypeID, forwardPValueCutoff, false, false);
                    String tmpURL = gdt.getGenURL();//(String)session.getAttribute("genURL");
                    String tmpGeneSymbol = gdt.getGeneSymbol();//(String)session.getAttribute("geneSymbol");
                    String tmpUcscURL = gdt.getUCSCURL();//(String)session.getAttribute("ucscURL");
                    //String tmpUcscURLFiltered =gdt.getUCSCURLFiltered();//(String)session.getAttribute("ucscURLFiltered");
                    if (tmpURL != null) {
                        genURL.add(tmpURL);
                        if (tmpGeneSymbol == null) {
                            geneSymbol.add("");
                        } else {
                            geneSymbol.add(tmpGeneSymbol);
                        }
                        if (tmpUcscURL == null) {
                            ucscURL.add("");
                        } else {
                            ucscURL.add(tmpUcscURL);
                        }
                                                /*if(tmpUcscURLFiltered==null){
                                                        ucscURLFiltered.add("");
                                                }else{
                                                        ucscURLFiltered.add(tmpUcscURLFiltered);
                                                }*/
                    }
                } else {
                    regionError = "You have entered a SNP.  Please enter a range around the snp such as chr1:50000+5000  or chr1:50000+-2500";
                }
            }
        }


    }


    if ((action != null) && !action.equals("Go") && genURL != null && genURL.size() > 0 && genURL.get(selectedGene) != null && genURL.get(selectedGene).startsWith("ERROR:")) {
        int newSelGene = -1;
        for (int i = 0; i < genURL.size() && newSelGene == -1; i++) {
            if (genURL.get(i) != null && !genURL.get(i).startsWith("ERROR:")) {
                newSelGene = i;
            }
        }
        if (newSelGene > -1) {
            selectedGene = newSelGene;
        }
    }

    if (firstEnsemblID != null && firstEnsemblID.size() > selectedGene) {
        selectedEnsemblID = firstEnsemblID.get(selectedGene);
    }

    //convert ArrayLists into comma sep string for submitting with form
    //Needed to remove all session variable usage


    String genURLString = oh.getAsSeparatedString(genURL, ",");
    String geneSymString = oh.getAsSeparatedString(geneSymbol, ",");
    String ucscURLString = oh.getAsSeparatedString(ucscURL, ",");
    //String ucscFilterURLString=oh.getAsSeparatedString(ucscURLFiltered,",");
    String firstENSString = oh.getAsSeparatedString(firstEnsemblID, ",");

    log.debug("end of most code");
%>


<div id="oldIE" style="display:none;color:#FF0000;">
    This page requires IE 10+. Your browser appears to be an older version of Internet Explorer. To use this feature
    please use a different browser(see <a href="<%=commonDir%>siteRequirements.jsp">Site Requirements</a>). We are sorry
    for any inconvenience this may cause. We're working hard to provide additional features which makes it difficult to
    maintain compatibility with all browsers.
</div>


<%if (popup) {%>
<div style="text-align:center;">
    <span class="button" onclick="window.close()" style="width:150px;">Close this Window</span>
</div>
<%}%>

<div id="IEproblem" style="display:none;color:#FF0000;text-align:center;">
    Internet Explorer is not currently recommended, while most features will work, you may encounter issues and poor
    performance. Please use FireFox or Chrome.<BR>
    We are working on fixing issues with using the Genome/Transcriptome Browser in Internet Explorer and we are sorry
    for any inconvenience.
</div>


<div style="text-align:center;width:100%;">
    <%if (message.length() > 0) {%>
    <span style="color:#FF0000;"><%=message%></span>
    <BR><BR>
    <%}%>
    <form method="post"
          action="gene.jsp"
          enctype="application/x-www-form-urlencoded"
          name="geneCentricForm" id="geneCentricForm" style="display:inline-block;width:100%;">
        <%if (!regionError.equals("")) {%>
        <div style="color:#FF0000;width:90%"><%=regionError%>
        </div>
        <%}%>
        <div class="widget" style="width:98%">

            <fieldset class="top">
                <legend>1. Specify a Gene or Region to get started:</legend>

                <label>Gene Identifier or Region:
                    <input type="text" name="geneTxt" id="geneTxt" size="35"
                           value="<%= (myDisplayGene!=null)?myDisplayGene:"" %>">
                    <span class="tooltipster"
                          title="1. Enter a gene identifier(e.g. gene symbol, probe set ID, Ensembl ID, etc.) in the gene field.
OR
Enter a region such as
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chr1:1-50000 is Chromosome 1 @ bp 1-50,000.
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chr1:5000+-2000 is Chromosome 1 @ bp 3,000-7,000.
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chr1:5000+2000 is Chromosome 1 @ bp 5,000-7,000.
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chr1:50.126-51.345 is Chromosome 1 @ 50,126,000-51,345,000
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chr1:50.15+-100.0k is chromosome 1 @ 50,050,000-50,250,000
OR
Click on the Translate Region to Mouse/Rat to find regions on the Mouse/Rat genome that correspond to a region of interest in the Human/Mouse/Rat genome.
2. Choose a species.
3. Click Go.">
                        <img src="<%=imagesDir%>/icons/info.gif"></span>
                    <BR>
                    ex. chr1:1-50000 or Agt
                </label><BR><BR>

                <label>Species:
                    <select name="speciesCB" id="speciesCB">
                        <option value="Rn" <%if(myOrganism!=null && myOrganism.equals("Rn")){%>selected<%}%>>Rattus
                            norvegicus
                        </option>
                        <option value="Mm" <%if(myOrganism!=null && myOrganism.equals("Mm")){%>selected<%}%>>Mus
                            musculus
                        </option>
                    </select>
                </label>
                <span class="tooltipster"
                      title="Mm - mm10 (default)<BR>Rn - rn6 (default)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rn5 (available)<BR>To change genome versions: look for a drop down list in the upper right corner of the browser once a region is displayed."><img
                        src="<%=imagesDir%>/icons/info.gif"></span>
                or <input type="button" name="translateBTN" id="translateBTN" value="Translate Region to Mouse/Rat"
                          onClick="openTranslateRegion()">
                <BR><BR>
                <span style="padding-left:10px;"> <input type="submit" class="goBTN" id="goBTN1" value="Go"
                                                         onClick="return displayWorking()"></span>

            </fieldset>

            <fieldset class="top">
                <legend>2. What data do you want to view?</legend>
                <div class="controlgroup">
                    <label>Initial View:
                        <select name="defaultView" id="defaultView">
                            <option value="custom">Custom View</option>
                            <%
                                for (int i = 0; i < views.size(); i++) {
                                    if (views.get(i).getGenomeVersion().equals(defaultGenomeVer) &&
                                            (views.get(i).getOrganism().toUpperCase().equals("AA") ||
                                                    myOrganism.toUpperCase().equals(views.get(i).getOrganism().toUpperCase()))
                                    ) {
                                        String display = views.get(i).getName();
                                        if (views.get(i).getUserID() == 0) {
                                            display = display + "   (Predefined)";
                                        } else {
                                            display = display + "   (Custom)";
                                        }
                            %>
                            <option value="<%=views.get(i).getID()%>"
                                    <%if(defView.equals(Integer.toString(views.get(i).getID()))){%>selected<%}%>><%=display%>
                            </option>
                            <%}%>
                            <%}%>
                        </select>
                    </label>
                    <span style="padding-left:10px;"> <input type="submit" class="goBTN" id="goBTN2" value="Go"
                                                             onClick="return displayWorking()"></span>
                    <BR><BR>
                    <span style="padding-left:10px;"> <input type="button" name="customBTN" id="customBTN"
                                                             value="Create Custom View"
                                                             onClick="return custView.displayCustom()"></span>
                </div>
            </fieldset>
            <div id="createCustomView" style="width:100%;/*overflow: auto;max-height: 400px;*/display:none;">
                <fieldset class="customFieldSet">
                    <legend>3. What data should be included in the custom view?</legend>
                    <div class="controlgroup">

                        <span style="float: right;"><span class="custViewStatus"></span><input type="submit" class="goBTN" id="goBTN3" value="Go"
                                                                                               onClick="return displayWorking()"></span>
                        <BR>
                        Genome Version:
                        <select id="custGenomeVer">
                            <%if (myOrganism.equals("Rn")) {%>
                            <option value="rn6">Rn6</option>
                            <option value="rn5">Rn5</option>
                            <%} else { %>
                            <option value="mm10">Mm10</option>
                            <%}%>
                        </select>
                        <BR>
                        Optional:
                        <span style="margin-left:45px;">View Name:<input type="text" id="viewName"></span><span style="margin-left:45px;">Email for later retreival:<input
                            type="text" id="assocEmail"></span>
                        <BR>
                        <div id="accordion">
                            <h3>Tissues</h3>
                            <div class="checkbox-choice">
                                <p>
                                    <input type="checkbox" class="custviewCbx" id="cbxTissueBrain">
                                    <label for="cbxTissueBrain">Whole Brain (HRDP RNA-Seq, HXB Arrays)</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTissueLiver">
                                    <label for="cbxTissueLiver">Liver (HRDP RNA-Seq, HXB Arrays)</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTissueHeart">
                                    <label for="cbxTissueHeart">Heart (BNLx/SHR RNA-Seq, HXB Arrays) </label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTissueKidney">
                                    <label for="cbxTissueHeart">Kidney (HXB RNA-Seq) </label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTissueMerged">
                                    <label for="cbxTissueMerged">Merged (HRDP RNA-Seq merged across tissues and strains) </label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTissueBAT">
                                    <label for="cbxTissueBAT">Brown Adipose (HXB Arrays)</label>
                                </p>
                            </div>
                            <h3>Data / Tracks</h3>
                            <div class="checkbox-choice">
                                <H3>PhenoGen Data</H3>
                                <p>
                                    <input type="checkbox" class="custviewCbx" checked="checked" id="cbxDatatotal">
                                    <label>Total RNA-Seq (Ribosome depleted)</label><BR>
                                <div class="checkbox-l3" id="totalOpts">
                                    <!--Version:
                                    <select id="selDataTotalVer">
                                        <option value="0">Current Version(update if newer versions)</option>
                                        <option value="5">HRDP v5(Current)</option>
                                        <option value="3">HRDP v4</option>
                                        <option value="1">HRDP v3</option>
                                    </select><BR>-->
                                    Tracks:<BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackReconstruction" checked="checked">
                                    <label>Reconstructed Transcriptome</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackSpliceJunction">
                                    <label>Splice Junctions</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackReadCounts">
                                    <label>Strain Read counts</label><BR>
                                    <div class="checkbox-l3" style="display:none;" id="ReadCountsOpts">
                                        Display Density:
                                        <select class="custviewSel" id="selDensity">
                                            <option value="1">Dense</option>
                                            <option value="2">Full</option>
                                        </select><BR>
                                        Select Count type:
                                        <select class="custviewSel" id="selReadCountType">
                                            <option value="total">Total Read Counts</option>
                                            <option value="sampled">Sampled Read Counts</option>

                                        </select><BR>
                                        <!--<input type="checkbox" class="custviewCbx" id="cbxTrackOptConstScale">
                                        <label >Use same Y-axis scale for all</label><BR>-->
                                        Select Strians to display:<BR>
                                        <input type="button" id="selectAll" value="Select All"
                                               onClick="return custView.selectAllStrains()">
                                        <input type="button" id="deselectAll" value="Deselect All"
                                               onClick="return custView.deselectAllStrains()"><BR>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsBNLx">BNLx (HXB parent)</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsSHR">SHR (HXB parent)</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsF344Stm">F344/Stm (FXLE parent)</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsLEStm">LE/Stm (FXLE parent)</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsACI">ACI</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsCOP">Cop</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsDA">DA</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsF344NCl">F344/NCl</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsF344NHsd">F344/NHsd</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsLEWCrl">LEW/Crl</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsLEWSsnhsd">LEW/SsNHsd</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsSHRP">SHRSP</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsSR">SR</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsSS">SS</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainReadsWKY">WKY</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH2">BXH2</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH3">BXH3</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH5">BXH5</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH6">BXH6</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH8">BXH8</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH9">BXH9</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH10">BXH10</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH11">BXH11</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH12">BXH12</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainBXH13">BXH13</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB1">HXB1</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB2">HXB2</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB3">HXB3</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB4">HXB4</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB5">HXB5</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB7">HXB7</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB10">HXB10</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB13">HXB13</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB15">HXB15</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB17">HXB17</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB18">HXB18</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB20">HXB20</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB21">HXB21</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB22">HXB22</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB23">HXB23</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB24">HXB24</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB25">HXB25</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXH27">HXB27</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB29">HXB29</label>
                                        <label><input type="checkbox" class="custviewCbx strainCbx" id="strainHXB31">HXB31</label>

                                    </div>
                                </div>
                                <input type="checkbox" class="custviewCbx" id="cbxDataSmallRNA">
                                <label>Small RNA-Seq</label><BR>
                                <div class="checkbox-l3" style="display:none;" id="SmallRNAOpts">
                                    Tracks:<BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackSmallRNA">
                                    <label>Small RNA-Seq Features</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackReadCountsSmall">
                                    <label>Small RNA-Seq Read Counts</label><BR>
                                    <div class="checkbox-l3" style="display:none;" id="ReadCountsSmallOpts">
                                        <label><input type="checkbox" class="custviewCbx" id="strainReadsSmallBNLxSHR">BNLx/SHR</label>
                                        <!--<label ><input type="checkbox" class="custviewCbx" id="">SHR</label>-->
                                    </div>
                                </div>
                                <input type="checkbox" class="custviewCbx" id="cbxTrackArray">
                                <label>Affymetrix Exon Arrays</label><BR>
                                <!--<div class="checkbox-l3" style="display:none;" id="ArrayOpts">
                                    Color By:
                                    <select id="selArrayColorBy">
                                        <option value="">Annotation</option>
                                        <option value="">Detection Above Background</option>
                                        <option value="">Heritiblity</option>
                                    </select><BR>
                                </div>-->
                                <input type="checkbox" class="custviewCbx" id="cbxTrackCirRNA">
                                <label>Circular RNAs</label><BR>
                                <!--<div class="checkbox-l3" style="display:none;" id="CirRNAOpts">
                                    Display:<BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxOptsCirRNAPred">
                                    <label>Predicted Circular RNAs (BNLx/SHR Brain/Heart/Liver) </label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxOptsCirRNAArray">
                                    <label>Array cirRNA Expression (BNLx/SHR Heart) </label>
                                </div>-->
                                <input type="checkbox" class="custviewCbx" id="cbxTrackVariant">
                                <label>Strain Variants</label><BR>
                                <div class="checkbox-l3" style="display:none;" id="VariantOpts">
                                    Strains:<BR>
                                    <label><input type="checkbox" class="custviewCbx" id="strainVarBNLx">BNLx</label>
                                    <label><input type="checkbox" class="custviewCbx" id="strainVarSHR">SHR</label>
                                    <label><input type="checkbox" class="custviewCbx" id="strainVarSHRJ">SHRJ</label>
                                    <label><input type="checkbox" class="custviewCbx" id="strainVarF344">F344</label>
                                </div>
                                </p>
                                <H3>Annotation</H3>
                                <p>
                                    <input type="checkbox" class="custviewCbx" checked="checked" id="cbxTrackSequence">
                                    <label>Ensembl</label><BR>
                                    <input type="checkbox" class="custviewCbx" checked="checked" id="cbxTrackEnsemblAnnotation">
                                    <label>Ensembl</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackRefSeq">
                                    <label>RefSeq</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackRepeat">
                                    <label>Repeat Masker</label><BR>
                                    <input type="checkbox" class="custviewCbx" id="cbxTrackQTL">
                                    <label>QTLs</label><BR>
                                </p>
                            </div>

                        </div>
                        <span style="float: right;"><span class="custViewStatus"></span><input type="submit" class="goBTN" id="goBTN4" value="Go"
                                                                                               onClick="return displayWorking()"></span></span>
                    </div>
                </fieldset>
            </div>
        </div>

        <input type="hidden" name="pvalueCutoffInput" id="pvalueCutoffInput" value="<%=pValueCutoff%>"/>
        <input type="hidden" name="forwardPvalueCutoffInput" id="forwardPvalueCutoffInput"
               value="<%=forwardPValueCutoff%>"/>
        <input type="hidden" name="tissues" id="tissues" value=""/>
        <input type="hidden" name="chromosomes" id="chromosomes" value=""/>
        <input type="hidden" name="levels" id="levels" value=""/>
        <input type="hidden" name="action" id="action" value="Get Transcription Details"/>
        <input type="hidden" name="genURLArray" id="genURLArray" value="<%=genURLString%>"/>
        <input type="hidden" name="geneSymArray" id="geneSymArray" value="<%=geneSymString%>"/>
        <input type="hidden" name="ucscURLArray" id="ucscURLArray" value="<%=ucscURLString%>"/>
        <input type="hidden" name="firstENSArray" id="firstENSArray" value="<%=firstENSString%>"/>
        <input type="hidden" name="geneSelect" id="geneSelect" value="<%=selectedGene%>"/>
        <input type="hidden" name="genomeVer" id="genomeVer" value="<%=genomeVer%>"/>
        <input type="hidden" name="uuid" id="uuid" value="<%=UUID%>"/>
    </form>
    <%if (genURL.size() > 1) {%>
    <BR><BR>
    <label><span style="font-weight:bold;color:#FF0000;font-size: large;">Multiple genes were returned please select the gene of Interest:</span>
        <select name="geneSelectCBX" id="geneSelectCBX">
            <%
                for (int i = 0; i < firstEnsemblID.size(); i++) {
            %>
            <option value="<%=firstEnsemblID.get(i)%>"
                    <%if((geneSymbol.get(i)!=null&&geneSymbol.get(i).toLowerCase().equals(myGene.toLowerCase()))){%>selected<%}%>>
                <%if (geneSymbol.get(i) != null && !geneSymbol.get(i).startsWith("ERROR")) {%>
                <%=geneSymbol.get(i)%> (<%=firstEnsemblID.get(i)%>)
                <%} else if (geneSymbol.get(i).startsWith("ERROR")) {%>
                <%=geneSymbol.get(i)%> (<%=firstEnsemblID.get(i)%>)
                <%} else {%>
                <%=firstEnsemblID.get(i)%>
                <%}%>

            </option>
            <%}%>
        </select>
    </label>

    <input type="submit" name="action" id="selGeneBTN" value="Go" onClick="enterSelectedGene()"><BR/>
    Hint: Try other synonyms if the first ID that you enter is not found.
    <BR/><BR/>
    <%}%>
</div>

<div class="translate">
</div>

<script type="text/javascript">
    var organism = "<%=myOrganism%>";
    var genomeVer = "<%=genomeVer%>";
    //console.log("initially set GenomeVer:"+genomeVer);
    var defaultGenomeVer = "<%=defaultGenomeVer%>";
    var defaultView =<%=defView%>;
    var pathPrefix = "web/GeneCentric/";
    <%if(overideGV.equals("Y")){%>
    var overideGV = true;
    <%}else{%>
    var overideGV = false;
    <%}%>
    <%if(userLoggedIn.getUser_name().equals("anon")){%>
    var uid = 0;
    <%}else{%>
    var uid =<%=userLoggedIn.getUser_id()%>;
    <%}%>
    document.getElementById("wait1").style.display = 'none';
    var translateDialog = createDialog(".translate", {width: 700, height: 820, title: "Translate Region", zIndex: 500});
    var initChrome = /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
    var initSafari = /safari/.test(navigator.userAgent.toLowerCase());
    var initFireFox = /firefox/.test(navigator.userAgent.toLowerCase());
    var inittestIE = /(wow|.net|ie)/.test(navigator.userAgent.toLowerCase());
    if (!initChrome && !initFireFox && !initSafari && inittestIE) {
        $("#IEproblem").show();
    }

    function isLocalStorage() {
        var test = 'test';
        try {
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        } catch (e) {
            return false;
        }
    }

    function openTranslateRegion() {
        $('.demo').hide();
        var region = $('#geneTxt').val();
        var species = $('#speciesCB').val();
        setTimeout(function () {
            $.ajax({
                url: "/web/GeneCentric/translateRegion.jsp",
                type: 'GET',
                data: {region: region, species: species},
                dataType: 'html',
                success: function (data2) {
                    translateDialog.dialog("open").html(data2);
                    closeDialog(translateDialog);
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        }, 50);
    }

    if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) { //test for MSIE x.x;
        var ieversion = new Number(RegExp.$1) // capture x.x portion and store as a number
        if (ieversion < 10) {
            $("#oldIE").show();
        }
    }


    //Setup View Menu
    var defviewList = [];
    var filterViewList = [];

    function getMainViewData(shouldUpdate) {
        var tmpContext = "/" + pathPrefix;
        console.log("main view url:" + tmpContext);
        if (pathPrefix == "") {
            tmpContext = "";
        }

        /*submitVer="mm10,rn6";
         if(genomeVer==='rn5'){
         submitVer="mm10,rn5";
         }*/
        /*var submitVer=genomeVer;
         if(submitVer==''){
         submitVer=defaultGenomeVer;
         }*/

        params = {genomeVer: genomeVer};
        if (PhenogenAnonSession) {
            params["UUID"] = PhenogenAnonSession.UUID;
        } else {
            PhenogenAnonSession = SetupAnonSession();
            PhenogenAnonSession.setupSession();
            params["UUID"] = PhenogenAnonSession.UUID;
        }
        $.ajax({
            url: tmpContext + "getBrowserViews.jsp",
            type: 'GET',
            data: params,
            dataType: 'json',
            success: function (data2) {
                defviewList = data2;
                console.log("ran getMainViewData()");
                console.log(defviewList);
                //readCookieViews();
                if (shouldUpdate === 1) {
                    console.log("setupDefaultView()");
                    setupDefaultView();
                }
            },
            error: function (xhr, status, error) {
                setTimeout(function () {
                    getMainViewData(shouldUpdate);
                }, 2000);
                d3.select("#defaultView").html("<option>Error: reloading</option>");
            }
        });
    }
    ;

    function readCookieViews() {
        //console.log("readCookieViews()");
        var viewString = "";
        if (isLocalStorage() === true) {
            var cur = localStorage.getItem("phenogenCustomViews");
            if (cur != undefined) {
                viewString = cur;
            }
        } else {
            if ($.cookie("phenogenCustomViews") != null) {
                viewString = $.cookie("phenogenCustomViews");
            }
        }
        if (viewString != null && viewString.indexOf("<///>") > -1) {
            var viewStrings = viewString.split("<///>");
            for (var j = 0; j < viewStrings.length; j++) {
                var params = viewStrings[j].split("</>");
                var obj = {};
                for (k = 0; k < params.length; k++) {
                    var values = params[k].split("=");
                    if (values[0] == "TrackSettingList") {
                        var trList = values[1].split(";");
                        obj.TrackList = [];
                        for (var m = 0; m < trList.length; m++) {
                            if (trList[m].length > 0) {
                                var tc = trList[m].substr(0, trList[m].indexOf(","));
                                var set = trList[m].substr(trList[m].indexOf(",") + 1);
                                var track = {};
                                track.TrackClass = tc;
                                track.Settings = set;
                                track.Order = m;
                                obj.TrackList.push(track);
                            }
                        }
                    } else if (values.length <= 2) {
                        obj[values[0]] = values[1];
                    } else if (values.length > 2) {
                        var name = params[k].substr(0, params[k].indexOf("="));
                        var value = params[k].substr(params[k].indexOf("=") + 1);
                        obj[name] = value;
                    }
                }
                obj.Source = "local";
                if (params.length > 3) {
                    obj.orgCount = obj.TrackList.length;
                    defviewList.push(obj);
                }
            }
        }
    }

    function checkStoredGenomeVersion(curOrganism) {
        var ver = "rn6";
        if (curOrganism === "Mm") {
            ver = "mm10";
        }
        if (isLocalStorage() === true) {
            var stored = localStorage.getItem(curOrganism + "DefGenomeVer");
            if (typeof stored === 'string' && stored !== "") {
                ver = stored;
            }
        } else {
            if ($.cookie(curOrganism + "DefGenomeVer") !== null) {
                var stored = $.cookie(curOrganism + "DefGenomeVer");
            }
            if (typeof stored === 'string' && stored !== "") {
                ver = stored;
            }
        }
        return ver;
    }

    function setupDefaultView() {

        var tmp = $("#speciesCB").val();
        if (!overideGV) {
            var specStoredGenomeVer = checkStoredGenomeVersion(tmp);
            $('input#genomeVer').val(specStoredGenomeVer);
            genomeVer = specStoredGenomeVer;
        } else {
            if (isLocalStorage() === true) {
                localStorage.setItem(tmp + "DefGenomeVer", genomeVer);
            } else {
                $.cookie(tmp + "DefGenomeVer", genomeVer);
            }
        }

        d3.select("#defaultView").html("");

        filterViewList = [];
        for (var i = 0; i < defviewList.length; i++) {
            if (defviewList[i].genomeVersion.indexOf(genomeVer) > -1 &&
                (defviewList[i].Organism.toLowerCase() === "aa" || defviewList[i].Organism.toLowerCase() === $('#speciesCB').val().toLowerCase())
            ) {
                filterViewList.push(defviewList[i]);
            }
        }
        var opt = d3.select("#defaultView").selectAll('option').data(filterViewList);
        opt.enter().append("option")
            .attr("value", function (d) {
                return d.ViewID;
            })
            .text(function (d) {
                var ret = d.Name;
                if (d.UserID == 0) {
                    ret = ret + "    (Predefined)";
                } else {
                    ret = ret + "   (Custom)";
                }
                if (d.Organism != "AA") {
                    if (d.Organism == "RN") {
                        ret = ret + "      (Rat Only)";
                    } else if (d.Organism == "MM") {
                        ret = ret + "     (Mouse Only)";
                    }
                }

                return ret;
            });
        opt.exit().remove();
        var test = $("#defaultView").val(defaultView)[0];
        if (test.selectedIndex === -1 && filterViewList.length > 0) {
            $("#defaultView").val(filterViewList[0].ViewID);
            defaultView = filterViewList[0].ViewID;
        }

    }

    function changeGenome(gVer, curView) {
        genomeVer = gVer;
        $('input#genomeVer').val(gVer);
        getMainViewData(0);
        d3.select("#defaultView").html("");
        filterViewList = [];
        var newViewID = -1;
        for (var i = 0; i < defviewList.length; i++) {
            console.log(defviewList[i].ViewID + "  " + defviewList[i].genomeVersion + ":" + genomeVer);
            if (defviewList[i].Organism.toLowerCase() === "aa" || defviewList[i].Organism.toLowerCase() === $('#speciesCB').val().toLowerCase()
            ) {
                filterViewList.push(defviewList[i]);
                if (typeof curView !== 'undefined' && typeof curView.Name !== 'undefined' && curView.Name === defviewList[i].Name) {
                    newViewID = defviewList[i].ViewID;
                }
            }
        }
        if (newViewID > 0) {
            $("#defaultView").val(newViewID);
        } else {
            if (genomeVer === "rn5" || genomeVer === "mm10") {
                $("#defaultView").val(3);
            } else if (genomeVer === "rn6") {
                $("#defaultView").val(13);
            }
        }
    }

    function updateDefaultView(gVer, curView) {
        $('input#genomeVer').val(gVer);
        genomeVer = gVer;
        getMainViewData(0);
        d3.select("#defaultView").html("");
        filterViewList = [];
        var newViewID = -1;
        for (var i = 0; i < defviewList.length; i++) {
            console.log(defviewList[i].ViewID + "  " + defviewList[i].genomeVersion + ":" + genomeVer);
            if (defviewList[i].genomeVersion.indexOf(genomeVer) > -1 &&
                (defviewList[i].Organism.toLowerCase() === "aa" || defviewList[i].Organism.toLowerCase() === $('#speciesCB').val().toLowerCase())
            ) {
                filterViewList.push(defviewList[i]);
                if (typeof curView !== 'undefined' && typeof curView.Name !== 'undefined' && curView.Name === defviewList[i].Name) {
                    newViewID = defviewList[i].ViewID;
                }
            }
        }
        var opt = d3.select("#defaultView").selectAll('option').data(filterViewList);
        opt.enter().append("option")
            .attr("value", function (d) {
                return d.ViewID;
            })
            .text(function (d) {
                var ret = d.Name;
                if (d.UserID == 0) {
                    ret = ret + "    (Predefined)";
                } else {
                    ret = ret + "   (Custom)";
                }
                if (d.Organism != "AA") {
                    if (d.Organism == "RN") {
                        ret = ret + "      (Rat Only)";
                    } else if (d.Organism == "MM") {
                        ret = ret + "     (Mouse Only)";
                    }
                }

                return ret;
            });
        opt.exit().remove();
        if (newViewID > 0) {
            $("#defaultView").val(newViewID);
        } else {
            $("#defaultView").val(filterViewList[0].ViewID);
        }

    }


    $("#speciesCB").on("change", function () {
        var tmp = $("#speciesCB").val();
        var specStoredGenomeVer = checkStoredGenomeVersion(tmp);
        $('input#genomeVer').val(specStoredGenomeVer);
        genomeVer = specStoredGenomeVer;
        getMainViewData(1);
        //setupDefaultView();
    });

</script>

<%if (scriptError) {%>
<div class="error">
    Your entry does not match a valid Gene or Region. Please try again using the examples above.
    The administrator has been notified, if message with a valid gene or region, they will look into and correct the
    issue.
</div>
<%} else if (organismError) {%>
<div class="error">
    The submitted organism does not match a valid entry. The only valid options are 'Rn' or 'Mm' for Rat or Mouse
    respectively.
    If you followed a link and received this message there is a problem with the url, but please enter your gene symbol
    or other
    identifier and submit the form again. Using the form will ensure the species submitted is correct.
</div>
<%} else if (genURL.size() == 1) {%>


<%@ include file="regionResults.jsp" %>
<%@ include file="web/GeneCentric/resultsHelp.jsp" %>


<%} else {%>

<%if (displayNoEnsembl && !myGene.startsWith("ENS")) { %>
Hint: Try other synonyms if the first ID that you enter is not found.
<BR/><BR/>
<BR/>
<div class="error">ERROR:No Ensembl ID found for the ID entered.<BR/><BR/>
    The Gene ID entered could not be translated to an Ensembl ID to retrieve gene information. Please try an alternate
    identifier for this gene. This gene ID has been reported to improve the translation of many Gene IDs to Ensembl Gene
    IDs. <BR/><BR/><b>Note:</b> At this time if there is no annotation in Ensembl for a gene we will not be able to
    display information about it, however if you have found your gene of interest on Ensembl entering the Ensembl Gene
    ID, which begins with ENSRNOG or ENSMUSG, should work.
</div>
<BR/><BR/>
<BR/>

<%} else if (displayNoEnsembl && myGene.startsWith("ENS")) {%>
<div class="error">ERROR: The Ensembl ID entered is not present in the current version of the Ensembl database being
    used
    for your selected genome version (<%=genomeVer%>).
    <BR><BR>
    <%
        if (genomeVer.startsWith("rn")) {
            int port = request.getServerPort();
            String prefix = "http";
            if (port == 443) {
                prefix = prefix + "s";
            }
            String newGenomeVer = "rn5";
    %>
    We recommend trying again after switching genome versions to <% if (genomeVer.equals("rn5")) {
        newGenomeVer = "rn6";%>Rn6<%} else {%>Rn5<%}%> by <a
            href="<%=prefix+"://"+host+contextRoot+"gene.jsp?geneTxt="+myGene+"&genomeVer="+newGenomeVer+"&auto=Y&overideGV=Y"%>">following
        this link</a>.
    <BR><BR>
    It is possible that the ID is from an older ensembl/genome version or an intermediate version of the ensembl
    database that is not supported on PhenoGen. We only support the latest
    version of the Ensembl database for each genome version. Currently v79 for rn5 and v84 for rn6.

    <%}%>
</div>
<BR><BR><BR/>
<%}%>


<div class="demo" style="width:100%;text-align:center;">
    <table style="width:100%;text-align:center;">
        <TR>
            <TD colspan="3" style="text-align:center;"><h2>Demonstrations</h2></TD>
        </TR>
        <TR>
            <TD style="text-align:center;">
                <h2>Quick Navigation Demonstration</h2>
                <BR/>
                <video width="350" height="250" controls="controls"
                       poster="downloads/Demos/BrowserNavDemo_350.png" preload="none">
                    <source src="downloads/Demos/BrowserNavDemo.mp4" type="video/mp4">
                    <source src="downloads/Demos/BrowserNavDemo.webm" type="video/webm">
                    <object data="downloads/Demos/BrowserNavDemo.mp4" width="350" height="250">
                    </object>
                    Your browser is not likely to work with the Genome Browser if you are seeing this message. Please
                    see <a href="<%=commonDir%>siteRequirements.jsp">Browser Support/Site Requirements</a>
                </video>
            </TD>
            <TD style="text-align:center;">
                <h2>Custom View/Custom Track Demonstration</h2><BR/>
                <video width="350" height="250" controls="controls"
                       poster="downloads/Demos/customTrackDemo_350.png" preload="none">
                    <source src="downloads/Demos/customTrackDemo.mp4" type="video/mp4">
                    <source src="downloads/Demos/customTrackDemo.webm" type="video/webm">
                    <object data="downloads/Demos/customTrackDemo.mp4" width="350" height="250">
                    </object>
                    Your browser is not likely to work with the Genome Browser if you are seeing this message. Please
                    see <a href="<%=commonDir%>siteRequirements.jsp">Browser Support/Site Requirements</a>
                </video>
            </TD>
            <TD style="text-align:center;">
                <h2>PhenoGen Overview</h2><BR/>
                <video width="350" height="250" controls="controls" poster="downloads/Demos/slides2_350.png"
                       preload="none">
                    <source src="downloads/Demos/workshop.mp4" type="video/mp4">
                    <source src="downloads/Demos/workshop.webm" type="video/webm">
                    <object data="downloads/Demos/workshop.mp4" width="350" height="250">
                    </object>
                    Your browser is not likely to work with the Genome Browser if you are seeing this message. Please
                    see <a href="<%=commonDir%>siteRequirements.jsp">Browser Support/Site Requirements</a>
                </video>
            </TD>
        </TR>
        <TR>
            <TD colspan="3">
                <H2>Navigation Help</H2>
            </TD>
        </TR>
        <TR>
            <TD colspan="3" style="text-align:center; ">
                <table style="width:98%">
                    <TR>
                        <TD style="text-align:center;">
                            <a class="fancybox" rel="fancybox-thumb" href="web/GeneCentric/help1.1.jpg"
                               title="Basic Controls on the main image."><img
                                    src="web/GeneCentric/help1.1_300.jpg"/></a>
                        </TD>
                        <TD style="text-align:center;">
                            <a class="fancybox" rel="fancybox-thumb" href="web/GeneCentric/help2.jpg"
                               title="Controls to select and edit views."><img src="web/GeneCentric/help2_300.jpg"/></a>
                        </TD>
                        <TD style="text-align:center;">
                            <a class="fancybox" rel="fancybox-thumb" href="web/GeneCentric/help3.jpg"
                               title="Controls to select and edit tracks."><img
                                    src="web/GeneCentric/help3_300.jpg"/></a>
                        </TD>
                    </TR>
                </table>
            </TD>
        </TR>
    </table>
    <BR/><BR/><BR/><BR/>
</div>

<%}%>

<script type="text/javascript">
    var custView;
    var PhenogenAnonSession;
    var contextRoot = "/";
    $("div#wait1").hide();
    $('.fancybox').fancybox({
        helpers: {
            title: {
                type: 'inside',
                position: 'top'
            },
            thumbs: {
                width: 200,
                height: 100
            }
        },
        nextEffect: 'fade',
        prevEffect: 'fade'
    });
    $(window).ready(function () {
        setTimeout(function () {
            getMainViewData(1);
            custView = GDBCustomView();
            custView.setup();
        }, 10);
        setTimeout(function () {
            PhenogenAnonSession = SetupAnonSession();
            PhenogenAnonSession.setupSession();
        }, 20);
        //$( ".controlgroup" ).controlgroup()
        /*$( ".controlgroup-vertical" ).controlgroup({
            "direction": "vertical"
        });*/

        $(".tooltipster").tooltipster({
            position: 'top-right',
            maxWidth: 250,
            offsetX: 24,
            offsetY: 5,
            contentAsHTML: true,
            //arrow: false,
            interactive: true,
            interactiveTolerance: 350
        });
    });
</script>

<%if (popup) {%>
<div style="text-align:center;">
    <span class="button" onclick="window.close()" style="width:150px;">Close this Window</span>
</div>
<%}%>
</div>
</div>

<%@ include file="/javascript/customView.js" %>
<script>
    <%@ include file="/javascript/Anon_session.js" %>
</script>

<%@ include file="/web/common/footer_adaptive.jsp" %>





